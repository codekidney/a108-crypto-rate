{"version":3,"sources":["CryptoList.js","CryptoFilter.js","Crypto.js","App.js","serviceWorker.js","index.js"],"names":["CryptoList","rates","this","props","react_default","a","createElement","className","map","rate","key","currency","color","last","arrow","aria-hidden","symbol","Component","CryptoFilter","onChange","type","placeholder","Crypto","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","axios","get","then","res","currentRates","keys","data","forEach","newRate","state","prevPropLast","filter","obj","currPropLast","push","setState","console","log","filterList","e","filterStr","target","value","toUpperCase","filterInitRates","length","filteredRates","includes","concat","initRates","_this2","window","setInterval","src_CryptoFilter","src_CryptoList","App","src_Crypto","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15d26b75.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass CryptoList extends Component {\r\n    render(){\r\n        const rates = this.props.rates;\r\n        // console.log(rates);\r\n        if(rates){\r\n            // console.log(Object.keys(rates));\r\n            return (\r\n                <div className=\"CryptoList\">\r\n                    <h5>Crypto List</h5>\r\n                    <ul className=\"list-group text-left\">\r\n                        {rates.map((rate) =>\r\n                        <li className=\"list-group-item\" key={rate.currency}>\r\n                            Last rate:&nbsp;\r\n                            <span className={rate.color}>\r\n                                {rate.last}, \r\n                                <i className={rate.arrow} aria-hidden=\"true\"></i>&nbsp;\r\n                            </span> \r\n                            {rate.currency}[{rate.symbol}]</li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"CryptoList\">\r\n                    <h3>Crypto List</h3>\r\n                </div>\r\n            )  \r\n        }\r\n    }\r\n}\r\nexport default CryptoList;","import React from 'react';\r\n\r\nconst CryptoFilter = (props) => {\r\n    return (\r\n        <div className=\"CryptoFilter\">\r\n            <h5>Crypto Filter</h5>\r\n            <div className=\"form-group\">\r\n                <label>Filter</label>\r\n                <input className=\"form-control\" onChange={props.onChange} type=\"text\" placeholder=\"Enter currency name\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CryptoFilter;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport CryptoList from './CryptoList';\r\nimport CryptoFilter from './CryptoFilter';\r\n\r\nclass Crypto extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: false,\r\n            filterInitRates: []\r\n        }\r\n    }\r\n\r\n    getData = () => {\r\n        axios.get(`https://blockchain.info/pl/ticker`)\r\n            .then(res => {\r\n                const currentRates = [];\r\n\r\n                // Create new array for store rate data (obj -> arr)\r\n                Object.keys(res.data).forEach((key) => {\r\n                    // Crate\r\n                    const newRate = res.data[key];\r\n                    newRate.currency = key;\r\n\r\n                    // Compare\r\n                    if(this.state.rates) {\r\n                        const prevPropLast = this.state.rates.filter(obj => {\r\n                            return obj.currency === key\r\n                        })[0].last;\r\n                        const currPropLast = newRate.last;\r\n                        if(currPropLast > prevPropLast) {\r\n                            newRate.color = 'green';\r\n                            newRate.arrow = 'fa fa-arrow-up';\r\n                        } else if (currPropLast < prevPropLast ){\r\n                            newRate.color = 'red';\r\n                            newRate.arrow = 'fa fa-arrow-down';\r\n                        } else {\r\n                            newRate.arrow = 'fa fa-arrows-h';\r\n                        }\r\n                    }\r\n\r\n                    // Add\r\n                    currentRates.push( newRate );\r\n                });\r\n                \r\n                // Set Current Rate\r\n                this.setState({ rates: currentRates});\r\n                \r\n                console.log('Rates updated');\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n        window.setInterval( () => { \r\n            if(!this.state.filter){\r\n                this.getData() \r\n            }\r\n        }, 3000);\r\n    }\r\n\r\n    filterList = (e) => {\r\n        const filterStr     = e.target.value.toUpperCase();\r\n        const currentRates  = (this.state.filterInitRates.length > 0) ? this.state.filterInitRates : this.state.rates;\r\n        const filteredRates = (filterStr.length > 0) ? currentRates.filter(obj => {\r\n            return obj.currency.includes(filterStr);\r\n        }) : [];\r\n        console.log(`Find currency: ${filterStr} | Found: ${filteredRates.length} from all: ${currentRates.length} rates`);\r\n        \r\n        if(filteredRates.length > 0){\r\n            if(this.state.filterInitRates.length === 0) {\r\n                this.setState({\r\n                    filterInitRates: currentRates\r\n                })\r\n            }\r\n            console.log('Update list');\r\n            this.setState({\r\n                rates: filteredRates\r\n            })\r\n        } else {\r\n            const initRates = this.state.filterInitRates;\r\n            this.setState({\r\n                rates: initRates\r\n            });\r\n        }\r\n        // Turn filter on when input not empty\r\n        if(filterStr.length > 0) {\r\n            this.setState({ filter: true })\r\n        } else {\r\n            this.setState({ filter: false })\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Crypto\">\r\n                <CryptoFilter onChange={this.filterList}/>\r\n                <CryptoList rates={this.state.rates} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Crypto;","import React from 'react';\nimport './App.css';\nimport Crypto from './Crypto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Crypto Rate</h1>\n      <div className=\"container pb-3\">\n        <Crypto />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}